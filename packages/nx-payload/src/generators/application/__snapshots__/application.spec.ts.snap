// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator should create Dockerfile for npm package manager 1`] = `
"
FROM node:20-alpine as base

FROM base as builder

ARG MONGO_URL
ARG NODE_ENV
ARG PAYLOAD_PUBLIC_SERVER_URL
ARG PORT

ENV MONGO_URL=\${MONGO_URL}
ENV NODE_ENV=\${NODE_ENV}
ENV PAYLOAD_PUBLIC_SERVER_URL=\${PAYLOAD_PUBLIC_SERVER_URL}
ENV PORT=\${PORT}

WORKDIR /app

COPY package.json ./

RUN npm config ls
RUN npm install

COPY . .

RUN npx nx build test-app

# We'll create a structure similar to scaffolding a default payload workspace.
# Admin build output should match \`buildPath\` in payload.config.ts.
FROM base as runtime

ENV NODE_ENV production

WORKDIR /app

COPY --from=builder /app/dist/apps/test-dir/package.json ./

RUN npm install --omit=dev

COPY --from=builder /app/dist/apps/test-dir/src   ./dist
COPY --from=builder /app/dist/apps/test-dir/build ./dist/apps/test-dir/build

EXPOSE 3000

CMD ["node", "dist/main.js"]
"
`;

exports[`application generator should not setup plugin inference when 'useInferencePlugins' is 'false' 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test-app",
  "projectType": "application",
  "root": "apps/test-dir",
  "sourceRoot": "apps/test-dir/src",
  "tags": [],
  "targets": {
    "build": {
      "dependsOn": [
        "payload-build",
      ],
      "executor": "@cdwr/nx-payload:build",
      "options": {
        "main": "apps/test-dir/src/main.ts",
        "outputPath": "dist/apps/test-dir",
        "tsConfig": "apps/test-dir/tsconfig.app.json",
      },
    },
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "payload-build": {
      "configurations": {
        "production": {
          "outputPath": "dist/apps/test-dir",
        },
      },
      "defaultConfiguration": "production",
      "executor": "@cdwr/nx-payload:payload-build",
    },
    "payload-cli": {
      "executor": "@cdwr/nx-payload:payload-cli",
    },
    "serve": {
      "configurations": {
        "development": {
          "buildTarget": "test-app:build:development",
        },
        "production": {
          "buildTarget": "test-app:build:production",
        },
      },
      "defaultConfiguration": "development",
      "dependsOn": [
        "build",
      ],
      "executor": "@nx/js:node",
      "options": {
        "buildTarget": "test-app:build",
        "runBuildTargetDependencies": true,
        "watch": true,
      },
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "apps/test-dir/jest.config.ts",
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;

exports[`application generator should setup plugin inference when 'useInferencePlugins' doesn't exist 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test-app",
  "projectType": "application",
  "root": "apps/test-dir",
  "sourceRoot": "apps/test-dir/src",
  "tags": [],
  "targets": {
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "apps/test-dir/jest.config.ts",
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;

exports[`application generator should setup plugin inference when 'useInferencePlugins' is 'true' 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test-app",
  "projectType": "application",
  "root": "apps/test-dir",
  "sourceRoot": "apps/test-dir/src",
  "tags": [],
  "targets": {
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "apps/test-dir/jest.config.ts",
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;
