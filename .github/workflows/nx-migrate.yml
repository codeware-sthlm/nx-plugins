name: Nx migrate

on:
  workflow_dispatch:
  schedule:
    # Every day at 6am UTC
    - cron: '0 6 * * *'

jobs:
  nx-migrate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_SEMVER_TOKEN }}
          fetch-depth: 0

      - name: Set git metadata
        run: |
          git config user.name "${{ vars.SEMVER_COMMIT_NAME }}"
          git config user.email "${{ vars.SEMVER_COMMIT_EMAIL }}"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - run: yarn install --immutable
        shell: bash

      - name: Check versions whether @nx/workspace is outdated
        id: workspace
        run: |
          CURRENT_VERSION=$(npm list @nx/workspace --depth=0 --json | jq -r '.dependencies[].version')
          echo $CURRENT_VERSION

          LAST_VERSION=$(npm view @nx/workspace version)
          echo $LAST_VERSION

          IS_OUTDATED=$(test ! -z "$(npm outdated @nx/workspace)" && echo true || echo false)
          echo $IS_OUTDATED

          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "last=$LAST_VERSION" >> $GITHUB_OUTPUT
          echo "outdated=$IS_OUTDATED" >> $GITHUB_OUTPUT

      - name: Update @nx/workspace
        if: steps.workspace.outputs.outdated == 'true'
        run: yarn nx migrate latest

      - name: Update @jscutlery/semver
        if: steps.workspace.outputs.outdated == 'true'
        run: yarn add -D @jscutlery/semver@latest

      - name: Install dependencies
        if: steps.workspace.outputs.outdated == 'true'
        run: yarn install --no-immutable

      - name: Check for migrations
        id: migrations
        if: steps.workspace.outputs.outdated == 'true'
        run: |
          MIGRATIONS_EXIST=$(test -f migrations.json && echo true || echo false)
          echo $MIGRATIONS_EXIST
          echo "exist=$MIGRATIONS_EXIST" >> $GITHUB_OUTPUT

      - name: Run @nx/workspace migrations
        if: steps.migrations.outputs.exist == 'true'
        run: yarn nx migrate --run-migrations

      - name: Update nx version in packages
        if: steps.workspace.outputs.outdated == 'true'
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          include: packages/**/package.json
          # Match lines with "create-nx-workspace" or "@nx/*".
          # Package, version and separator are divided into match groups:
          # Eg. "@nx/express": "18.0.0"
          # =>  "<group 1><group 2><group 3>"
          #     "<@nx/express><": "><18.0.0>"
          # Match group 3 is replaced with the latest version,
          # hence the value for current version is not considered.
          find: (create\-nx\-workspace|@nx\/[^\"]*)(\":\s\")(\d+\.\d+\.\d+)
          replace: ${1}${2}${{ steps.workspace.outputs.last }}

      - name: Run tests
        id: test
        if: steps.workspace.outputs.outdated == 'true'
        run: |
          yarn nx run-many -t lint,test,build -c ci --no-cloud
          yarn semver:local
        continue-on-error: true

      - name: Run E2E
        id: e2e
        if: steps.workspace.outputs.outdated == 'true' && steps.test.outcome == 'success'
        run: yarn nx e2e nx-payload-e2e --no-cloud
        timeout-minutes: 30
        continue-on-error: true

      - name: Create Pull Request
        id: cpr
        if: steps.workspace.outputs.outdated == 'true'
        uses: peter-evans/create-pull-request@v6
        env:
          curr-version: ${{ steps.workspace.outputs.current }}
          last-version: ${{ steps.workspace.outputs.last }}
        with:
          git-token: ${{ secrets.GH_SEMVER_TOKEN }}
          commit-message: 'build: ðŸ“¦ update nx workspace to ${{ env.last-version }}'
          branch: update-nx-workspace-${{ env.last-version }}
          delete-branch: true
          title: Update @nx/workspace to ${{ env.last-version }}
          body: |
            Update Nx from ${{ env.curr-version }} to ${{ env.last-version }}

            > Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          labels: automated pr
          assignees: hakalb

      - name: Enable Pull Request Automerge
        if: vars.NX_AUTO_MIGRATE == 'true' && steps.cpr.outputs.pull-request-operation == 'created'
        run: gh pr merge --rebase --auto ${{ steps.cpr.outputs.pull-request-number }}
        env:
          token: ${{ secrets.GH_SEMVER_TOKEN }}
