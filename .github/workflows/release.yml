name: Release

# There's no value in releasing on every commit,
# so this process is better handled manually when needed.
on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: Run release process without making any changes or pushing to npm
        default: true
        type: boolean

env:
  # TODO: Using last release tag pattern require a 'last-release' tag per package
  tag_last_release: false
  node_version: 18

jobs:
  test:
    runs-on: ubuntu-latest

    if: github.ref_name == 'master' || github.ref_name == 'beta'

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup
        with:
          node-version: ${{ env.node_version }}

      - name: Test
        uses: ./.github/actions/test

  release:
    runs-on: ubuntu-latest

    needs: [test]

    concurrency:
      group: ${{ github.ref }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup
        with:
          git-token: ${{ secrets.GH_SEMVER_TOKEN }}
          node-version: ${{ env.node_version }}

      - name: Pre-Release beta on branch 'beta' and skip gitlab release and npm publish
        id: beta
        shell: bash
        run: |
          options="${{ github.ref_name == 'beta' && '--baseBranch=beta --releaseAs=prerelease --preid=beta --postTargets=' || '' }}"
          echo "options=$options" >> $GITHUB_OUTPUT

      # Use `npx` instead of `yarn` because `yarn` sets NPM_* environment variables (like NPM_CONFIG_REGISTRY).
      # This affects `npm publish` ignoring the .npmrc file, which is set up by `setup-node` action.
      # Run for all version projects and let semver decide whether to create a new release for each project.
      - name: Release version for affected projects
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          beta="${{ steps.beta.outputs.options }}"
          dryRun="${{ inputs.dry-run && '--dry-run --verbose' || '' }}"
          npx nx run-many -t version $beta --parallel=1 --nxBail=true $dryRun
